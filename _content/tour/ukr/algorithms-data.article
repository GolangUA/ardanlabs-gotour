Структури даних
У цій секції наведено приклади структур даних.

* Хеш мапа (Hash Map)

- [[https://www.ardanlabs.com/training/individual-on-demand/ultimate-go-bundle/][Дивитися відео]]
- Якщо потрібна фінансова допомога, то використовуй [[https://www.ardanlabs.com/scholarship/][формy для отримання стипендії]]

Ця програма демонструє просту хеш таблицю.

- hashKey(key) повертає число між 0 та len(buckets)-1

- Ми використовуємо зріз елементів як кошик (bucket), щоб обробляти випадки, коли один або більше ключів
  хешовані у тий самий кошик.

- Детальніше читай тут [[https://en.wikipedia.org/wiki/Hash_table][https://en.wikipedia.org/wiki/Hash_table]]

*Діаграма*

    У хеш мапі дані індексовані по кошику та
    позиції всереднині кошика.

    hashKey(key) ──────────────┐
                               │
                               ▽
     ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐
     │    │     │     │     │     │     │     │     │  ◁── кошик
     └────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘
             │                 │
             ▽                 ▽
       ┌─────────────┐   ┌─────────────┐
       │ key │ value │   │ key │ value │  ◁── елемент
       ├─────────────┤   ├─────────────┤
       │ key │ value │   │ key │ value │
       ├─────────────┤   └─────────────┘
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       ├─────────────┤
       │ key │ value │
       └─────────────┘

.play algorithms/data/hash_map.go

* Звʼязний список (Linked list)

Ця програма демонструє базовий звʼязний список.

- Детальніше дивись тут [[https://en.wikipedia.org/wiki/Linked_list][https://en.wikipedia.org/wiki/Linked_list]]

*Діаграма*

    У звʼязному списку значення повʼязані між собою у довільному порядку
    через використання вказівників.

    ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐     ┌─────┐
    │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │ ◁─▷ │ Val │
    └─────┘     └─────┘     └─────┘     └─────┘     └─────┘
       △                                               △
       │                                               │
       ────────────────────        ─────────────────────
                          │        │
                          │        │
                       ┌───────────────┐
                       │ First │  Last │
                       └───────────────┘

.play algorithms/data/list.go

* Черга (Queue)

Ця програма демонструє просту кільцеву чергу.

- Детальніше дивись тут [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][https://en.wikipedia.org/wiki/Queue_(abstract_data_type)]]

*Діаграма*

    У черзі перше значення, яке прийшло, виходить першим.

               ┌──────────────────────────────────────────┐
    ┌─────┐    │ ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐ │    ┌─────┐
    │ V06 │ ─▷ │ │ V05 │ ─▷ │ V04 │ ─▷ │ V03 │ ─▷ │ V02 │ │ ─▷ │ V01 │
    └─────┘    | └─────┘    └─────┘    └─────┘    └─────┘ |    └─────┘
               └──────────────────────────────────────────┘

.play algorithms/data/queue_circular.go

* Стек (Stack)

Ця програма демонструє простий стек.

- Детальніше дивись тут [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)][https://en.wikipedia.org/wiki/Stack_(abstract_data_type)]]

*Діаграма*

    У стеці перше значення, яке прийшло, виходить останнім.

           ┌─────┐
           │ V05 │
           └─────┘
              │
              ▽          ┌─────┐
        ┌───────────┐ ─▷ │ V04 │
        │  ┌─────┐  │    └─────┘
        │  │ V03 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V02 │  │
        │  └─────┘  │
        │  ┌─────┐  │
        │  │ V01 │  │
        │  └─────┘  │
        └───────────┘

.play algorithms/data/stack.go

* Двійкове дерево (Binary tree)

Ця програма демонструє просте двійкове дерево.

- Детальніше дивись тут [[https://en.wikipedia.org/wiki/Binary_tree][https://en.wikipedia.org/wiki/Binary_tree]]

*Діаграма*

    У бінарному дереві дані індексуються ліворуч або праворуч
    дерева. З додаванням кожного вузла дерево залишається
    збалансованим.

      0     1     2     3     4     5     6    ◁─ Порядок додавання
    ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐
    │ 65 ││ 45 ││ 35 ││ 75 ││ 85 ││ 78 ││ 95 │
    └────┘└────┘└────┘└────┘└────┘└────┘└────┘

                   ┌────┐
                   │ 75 │                      ◁─ Фінальне дерево
                   └────┘
                 /        \
           ┌────┐          ┌────┐
           │ 45 │          │ 85 │
           └────┘          └────┘
           /    \          /    \
       ┌────┐  ┌────┐  ┌────┐  ┌────┐
       │ 35 │  │ 65 │  │ 78 │  │ 95 │
       └────┘  └────┘  └────┘  └────┘

.play algorithms/data/tree_binary.go
